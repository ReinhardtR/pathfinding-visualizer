{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","index.js"],"names":["Node","props","state","this","row","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","nodes","node","push","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","unvisitedNeighbors","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","START_NODE","FINISH_NODE","PathfindingVisualizer","mouseIsPressed","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","i","setTimeout","animateShortestPath","document","getElementById","classList","add","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","onClick","visualizeDijkstra","map","rowIdx","nodeIdx","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b53026d4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","// Performs Dijkstra's algorithm; returns *all* nodes in the order\r\n// in which they were visited. Also makes nodes point back to their\r\n// previous node, effectively allowing us to compute the shortest path\r\n// by backtracking from the finish node.\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  const visitedNodesInOrder = [];\r\n  startNode.distance = 0;\r\n  const unvisitedNodes = getAllNodes(grid);\r\n  while (!!unvisitedNodes.length) {\r\n    sortNodesByDistance(unvisitedNodes);\r\n    const closestNode = unvisitedNodes.shift();\r\n    // If we encounter a wall, we skip it.\r\n    if (closestNode.isWall) continue;\r\n    // If the closest node is at a distance of infinity,\r\n    // we must be trapped and should therefore stop.\r\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n    closestNode.isVisited = true;\r\n    visitedNodesInOrder.push(closestNode);\r\n    if (closestNode === finishNode) return visitedNodesInOrder;\r\n    updateUnvisitedNeighbors(closestNode, grid);\r\n  }\r\n}\r\n\r\nfunction sortNodesByDistance(unvisitedNodes) {\r\n  unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n}\r\n\r\nfunction updateUnvisitedNeighbors(node, grid) {\r\n  const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n  for (const neighbor of unvisitedNeighbors) {\r\n    neighbor.distance = node.distance + 1;\r\n    neighbor.previousNode = node;\r\n  }\r\n}\r\n\r\nfunction getUnvisitedNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { col, row } = node;\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors.filter((neighbor) => !neighbor.isVisited);\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n  const nodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      nodes.push(node);\r\n    }\r\n  }\r\n  return nodes;\r\n}\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\n\r\nimport {\r\n  dijkstra,\r\n  getNodesInShortestPathOrder,\r\n} from \"../algorithms/dijkstra.js\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nconst START_NODE = {\r\n  row: 10,\r\n  col: 10,\r\n};\r\n\r\nconst FINISH_NODE = {\r\n  row: 40,\r\n  col: 10,\r\n};\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({ grid });\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid, mouseIsPressed: true });\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp() {\r\n    this.setState({ mouseIsPressed: false });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n      } else {\r\n        setTimeout(() => {\r\n          const node = visitedNodesInOrder[i];\r\n          document\r\n            .getElementById(`node-${node.row}-${node.col}`)\r\n            .classList.add(\"node-visited\");\r\n        }, 10 * i);\r\n      }\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document\r\n          .getElementById(`node-${node.row}-${node.col}`)\r\n          .classList.add(\"node-shortest-path\");\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    const { grid } = this.state;\r\n    const startNode = grid[START_NODE.row][START_NODE.col];\r\n    const finishNode = grid[FINISH_NODE.row][FINISH_NODE.col];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <button onClick={() => this.visualizeDijkstra()}>\r\n          Visualize Dijkstra's Algorithm\r\n        </button>\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const { row, col, isStart, isFinish, isWall } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      row={row}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      onMouseUp={() => this.handleMouseUp()}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 50; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 20; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE.row && col === START_NODE.col,\r\n    isFinish: row === FINISH_NODE.row && col === FINISH_NODE.col,\r\n    isWall: false,\r\n    distance: Infinity,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n  const newNode = {\r\n    ...node,\r\n    isWall: !node.isWall,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport PathfindingVisualizer from \"./PathfindingVisualizer/PathfindingVisualizer\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <PathfindingVisualizer></PathfindingVisualizer>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}